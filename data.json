[
  {
    "question": "How to check the Git version?",
    "answer": "Use: git --version"
  },
  {
    "question": "How to get help for a specific Git command?",
    "answer": "Use: git help <command> or git <command> --help"
  },
  {
    "question": "How to run Git as if started in a different directory?",
    "answer": "Use: git -C <path> <command>"
  },
  
  {
    "question": "How to create a new Git branch and switch to it?",
    "answer": "Use: git checkout -b new-branch-name"
  },
  {
    "question": "How to compress the folder reports into reports.tar.gz?",
    "answer": "Use: tar -czvf reports.tar.gz reports/"
  },
  {
    "question": "How to list all Python files in the current directory recursively?",
    "answer": "Use: find . -type f -name \"*.py\""
  },
  {
    "question": "How to set up a virtual environment and install requests?",
    "answer": "Use: python -m venv venv && source venv/bin/activate && pip install requests"
  },
  {
    "question": "How to fetch only the first ten lines of a file named output.log?",
    "answer": "Use: head -n 10 output.log"
  },
  {
    "question": "How to delete all log files except todayâ€™s?",
    "answer": "Use: find . -name \"*.log\" ! -newermt $(date +%F) -delete"
  },
  {
    "question": "How to set file permissions to read-only for everyone?",
    "answer": "Use: chmod 444 filename.txt"
  }
,

  {
    "question": "How to pass a configuration parameter to a Git command?",
    "answer": "Use: git -c <name>=<value> <command>"
  },
  {
    "question": "How to set the path to the repository (.git directory)?",
    "answer": "Use: git --git-dir=<path> <command> or set GIT_DIR environment variable"
  },
  {
    "question": "How to set the path to the working tree?",
    "answer": "Use: git --work-tree=<path> <command> or set GIT_WORK_TREE environment variable"
  },
  {
    "question": "How to treat a repository as bare?",
    "answer": "Use: git --bare <command>"
  },
  {
    "question": "How to disable Git advice messages?",
    "answer": "Use: git --no-advice <command> or set GIT_ADVICE=0"
  },
  {
    "question": "How to disable Git's pager for output?",
    "answer": "Use: git --no-pager <command>"
  },
  {
    "question": "How to set the Git namespace?",
    "answer": "Use: git --namespace=<name> <command> or set GIT_NAMESPACE environment variable"
  },
  {
    "question": "How to list available Git commands?",
    "answer": "Use: git --list-cmds=<group>[,<group>...]"
  },
  {
    "question": "How to read gitattributes from a tree-ish instead of worktree?",
    "answer": "Use: git --attr-source=<tree-ish> <command>"
  },
  {
    "question": "How to disable replacement refs in Git?",
    "answer": "Use: git --no-replace-objects <command>"
  },
  {
    "question": "How to disable lazy fetching in Git?",
    "answer": "Use: git --no-lazy-fetch <command>"
  },
  {
    "question": "How to disable optional locks in Git?",
    "answer": "Use: git --no-optional-locks <command>"
  },
  {
    "question": "How to treat pathspecs literally (no globbing)?",
    "answer": "Use: git --literal-pathspecs <command> or set GIT_LITERAL_PATHSPECS=1"
  },
  {
    "question": "How to add glob magic to all pathspecs?",
    "answer": "Use: git --glob-pathspecs <command> or set GIT_GLOB_PATHSPECS=1"
  },
  {
    "question": "How to add icase magic to all pathspecs?",
    "answer": "Use: git --icase-pathspecs <command> or set GIT_ICASE_PATHSPECS=1"
  },
  {
    "question": "How to set the author name for a commit?",
    "answer": "Set GIT_AUTHOR_NAME environment variable or use git config --global user.name"
  },
  {
    "question": "How to set the author email for a commit?",
    "answer": "Set GIT_AUTHOR_EMAIL environment variable or use git config --global user.email"
  },
  {
    "question": "How to set the author date for a commit?",
    "answer": "Set GIT_AUTHOR_DATE environment variable"
  },
  {
    "question": "How to set the committer name for a commit?",
    "answer": "Set GIT_COMMITTER_NAME environment variable"
  },
  {
    "question": "How to set the committer email for a commit?",
    "answer": "Set GIT_COMMITTER_EMAIL environment variable"
  },
  {
    "question": "How to set the committer date for a commit?",
    "answer": "Set GIT_COMMITTER_DATE environment variable"
  },
  {
    "question": "How to change the number of context lines in diffs?",
    "answer": "Set GIT_DIFF_OPTS=\"--unified=5\" or use -U option"
  },
  {
    "question": "How to use an external diff program?",
    "answer": "Set GIT_EXTERNAL_DIFF environment variable to the program path"
  },
  {
    "question": "How to control merge verbosity?",
    "answer": "Set GIT_MERGE_VERBOSITY environment variable or merge.verbosity config"
  },
  {
    "question": "How to change the Git pager?",
    "answer": "Set GIT_PAGER environment variable or core.pager config"
  },
  {
    "question": "How to disable the Git pager?",
    "answer": "Set GIT_PAGER=\"\" or GIT_PAGER=\"cat\""
  },
  {
    "question": "How to change the delay before showing progress indicators?",
    "answer": "Set GIT_PROGRESS_DELAY environment variable"
  },
  {
    "question": "How to change the Git editor?",
    "answer": "Set GIT_EDITOR environment variable or core.editor config"
  },
  {
    "question": "How to change the sequence editor for interactive rebase?",
    "answer": "Set GIT_SEQUENCE_EDITOR environment variable or sequence.editor config"
  },
  {
    "question": "How to change the SSH command used by Git?",
    "answer": "Set GIT_SSH or GIT_SSH_COMMAND environment variable"
  },
  {
    "question": "How to disable SSL verification for HTTPS operations?",
    "answer": "Set GIT_SSL_NO_VERIFY environment variable to any value"
  },
  {
    "question": "How to set a custom askpass program for Git?",
    "answer": "Set GIT_ASKPASS environment variable"
  },
  {
    "question": "How to disable terminal prompts in Git?",
    "answer": "Set GIT_TERMINAL_PROMPT=0"
  },
  {
    "question": "How to use custom global/system config files?",
    "answer": "Set GIT_CONFIG_GLOBAL or GIT_CONFIG_SYSTEM environment variables"
  },
  {
    "question": "How to skip system-wide Git config?",
    "answer": "Set GIT_CONFIG_NOSYSTEM=1"
  },
  {
    "question": "How to enable general trace messages in Git?",
    "answer": "Set GIT_TRACE=1 or GIT_TRACE=true"
  },
  {
    "question": "How to enable performance trace messages?",
    "answer": "Set GIT_TRACE_PERFORMANCE=1"
  },
  {
    "question": "How to enable ref database operation traces?",
    "answer": "Set GIT_TRACE_REFS=1"
  },
  {
    "question": "How to enable setup trace messages?",
    "answer": "Set GIT_TRACE_SETUP=1"
  },
  {
    "question": "How to enable curl trace for Git transport protocol?",
    "answer": "Set GIT_TRACE_CURL=1"
  },
  {
    "question": "How to enable detailed trace2 messages?",
    "answer": "Set GIT_TRACE2=1"
  },
  {
    "question": "How to enable JSON-based trace2 event format?",
    "answer": "Set GIT_TRACE2_EVENT=1"
  },
  {
    "question": "How to disable Git object replacement?",
    "answer": "Set GIT_NO_REPLACE_OBJECTS=1"
  },
  {
    "question": "How to disable lazy fetching?",
    "answer": "Set GIT_NO_LAZY_FETCH=1"
  },
  {
    "question": "How to set the reflog action message?",
    "answer": "Set GIT_REFLOG_ACTION environment variable"
  },
  {
    "question": "How to disable ref paranoia (ignore broken refs)?",
    "answer": "Set GIT_REF_PARANOIA=0"
  },
  {
    "question": "How to set allowed Git protocols?",
    "answer": "Set GIT_ALLOW_PROTOCOL environment variable (colon-separated list)"
  },
  {
    "question": "How to disable user-configured protocols?",
    "answer": "Set GIT_PROTOCOL_FROM_USER=0"
  },
  {
    "question": "How to disable optional locks?",
    "answer": "Set GIT_OPTIONAL_LOCKS=0"
  },
  {
    "question": "How to print SHA-1 values with ellipsis?",
    "answer": "Set GIT_PRINT_SHA1_ELLIPSIS=yes (deprecated)"
  },
  {
    "question": "What environment variable sets the path to core Git programs?",
    "answer": "GIT_EXEC_PATH"
  },
  {
    "question": "What environment variable specifies alternate object directories?",
    "answer": "GIT_ALTERNATE_OBJECT_DIRECTORIES"
  },
  {
    "question": "What environment variable prevents chdir up into slow directories?",
    "answer": "GIT_CEILING_DIRECTORIES"
  },
  {
    "question": "What environment variable allows discovery across filesystems?",
    "answer": "GIT_DISCOVERY_ACROSS_FILESYSTEM"
  }
,
  {
    "question": "How to create a new Git branch?",
    "answer": "Use: git checkout -b <branch-name>"
  },
  {
    "question": "How to make a directory?",
    "answer": "Use: mkdir <directory-name>"
  },
  {
    "question": "How to create a tar archive?",
    "answer": "Use: tar cf path/to/target.tar path/to/file1 path/to/file2"
  },
  {
    "question": "How to create a compressed gzip tar archive?",
    "answer": "Use: tar czf path/to/target.tar.gz path/to/file1 path/to/file2"
  },
  {
    "question": "How to create a compressed tar archive from a directory?",
    "answer": "Use: tar czf path/to/target.tar.gz --directory=path/to/directory ."
  },
  {
    "question": "How to extract a tar archive?",
    "answer": "Use: tar xvf path/to/source.tar"
  },
  {
    "question": "How to extract a tar archive to a specific directory?",
    "answer": "Use: tar xf path/to/source.tar --directory=path/to/directory"
  },
  {
    "question": "How to create a compressed archive with automatic compression detection?",
    "answer": "Use: tar caf path/to/target.tar.xz path/to/file1 path/to/file2"
  },
  {
    "question": "How to list contents of a tar file?",
    "answer": "Use: tar tvf path/to/source.tar"
  },
  {
    "question": "How to extract specific files from a tar archive?",
    "answer": "Use: tar xf path/to/source.tar --wildcards \"*.html\""
  },
  {
    "question": "How to view contents of a directory?",
    "answer": "Use: ls"
  },
  {
    "question": "How to view detailed directory listing?",
    "answer": "Use: ls -l"
  },
  {
    "question": "How to view hidden files in a directory?",
    "answer": "Use: ls -a"
  },
  {
    "question": "How to view directory contents with human-readable sizes?",
    "answer": "Use: ls -lh"
  },
  {
    "question": "How to sort files by modification time?",
    "answer": "Use: ls -lt"
  },
  {
    "question": "How to reverse sort order of files?",
    "answer": "Use: ls -lr"
  },
  {
    "question": "How to view inode numbers of files?",
    "answer": "Use: ls -i"
  },
  {
    "question": "How to view directory contents recursively?",
    "answer": "Use: ls -R"
  },
  {
    "question": "How to get help for tar command?",
    "answer": "Use: tar --help or man tar"
  },
  {
    "question": "How to get help for ls command?",
    "answer": "Use: ls --help or man ls"
  }
,
  {
    "question": "How to initialize a new Git repository?",
    "answer": "Use: git init"
  },
  {
    "question": "How to clone an existing repository?",
    "answer": "Use: git clone <repository-url>"
  },
  {
    "question": "How to check the current status of your repository?",
    "answer": "Use: git status"
  },
  {
    "question": "How to stage files for commit?",
    "answer": "Use: git add <file>"
  },
  {
    "question": "How to commit staged changes?",
    "answer": "Use: git commit -m \"commit message\""
  },
  {
    "question": "How to create a new branch?",
    "answer": "Use: git branch <branch-name>"
  },
  {
    "question": "How to switch to a different branch?",
    "answer": "Use: git checkout <branch-name> or git switch <branch-name>"
  },
  {
    "question": "How to merge branches?",
    "answer": "Use: git merge <branch-name>"
  },
  {
    "question": "How to fetch changes from a remote repository?",
    "answer": "Use: git fetch"
  },
  {
    "question": "How to pull changes from a remote repository?",
    "answer": "Use: git pull"
  },
  {
    "question": "How to push changes to a remote repository?",
    "answer": "Use: git push"
  },
  {
    "question": "How to view the commit history?",
    "answer": "Use: git log"
  },
  {
    "question": "How to see changes between commits?",
    "answer": "Use: git diff"
  },
  {
    "question": "How to create a tag?",
    "answer": "Use: git tag <tag-name>"
  },
  {
    "question": "How to stash changes temporarily?",
    "answer": "Use: git stash"
  },
  {
    "question": "How to apply stashed changes?",
    "answer": "Use: git stash apply"
  },
  {
    "question": "How to reset changes to a file?",
    "answer": "Use: git restore <file>"
  },
  {
    "question": "How to remove a file from Git?",
    "answer": "Use: git rm <file>"
  },
  {
    "question": "How to move or rename a file in Git?",
    "answer": "Use: git mv <old-name> <new-name>"
  },
  {
    "question": "How to configure Git settings?",
    "answer": "Use: git config <setting> <value>"
  },
  {
    "question": "How to view help for a Git command?",
    "answer": "Use: git help <command>"
  },
  {
    "question": "How to create a new branch and switch to it?",
    "answer": "Use: git checkout -b <branch-name>"
  },
  {
    "question": "How to rebase the current branch onto another?",
    "answer": "Use: git rebase <branch>"
  },
  {
    "question": "How to cherry-pick a commit?",
    "answer": "Use: git cherry-pick <commit-hash>"
  },
  {
    "question": "How to revert a commit?",
    "answer": "Use: git revert <commit-hash>"
  },
  {
    "question": "How to view remote repositories?",
    "answer": "Use: git remote -v"
  },
  {
    "question": "How to add a remote repository?",
    "answer": "Use: git remote add <name> <url>"
  },
  {
    "question": "How to show information about a commit?",
    "answer": "Use: git show <commit-hash>"
  },
  {
    "question": "How to find which commit introduced a bug?",
    "answer": "Use: git bisect"
  },
  {
    "question": "How to see who last modified a line in a file?",
    "answer": "Use: git blame <file>"
  },
  {
    "question": "How to search the codebase for a pattern?",
    "answer": "Use: git grep <pattern>"
  },
  {
    "question": "How to create an archive of the repository?",
    "answer": "Use: git archive"
  },
  {
    "question": "How to clean untracked files from the working tree?",
    "answer": "Use: git clean"
  },
  {
    "question": "How to optimize the local repository?",
    "answer": "Use: git gc"
  },
  {
    "question": "How to check repository integrity?",
    "answer": "Use: git fsck"
  },
  {
    "question": "How to view the reference log?",
    "answer": "Use: git reflog"
  },
  {
    "question": "How to rewrite commit history?",
    "answer": "Use: git filter-branch"
  },
  {
    "question": "How to create a bundle of the repository?",
    "answer": "Use: git bundle"
  },
  {
    "question": "How to view the contents of a Git object?",
    "answer": "Use: git cat-file"
  },
  {
    "question": "How to check if files would be ignored?",
    "answer": "Use: git check-ignore"
  },
  {
    "question": "How to view the tree structure?",
    "answer": "Use: git ls-tree"
  },
  {
    "question": "How to find the merge base of commits?",
    "answer": "Use: git merge-base"
  },
  {
    "question": "How to list references?",
    "answer": "Use: git show-ref"
  },
  {
    "question": "How to update the index?",
    "answer": "Use: git update-index"
  },
  {
    "question": "How to update a reference?",
    "answer": "Use: git update-ref"
  },
  {
    "question": "How to verify pack files?",
    "answer": "Use: git verify-pack"
  },
  {
    "question": "How to write a tree object?",
    "answer": "Use: git write-tree"
  }
,
  {
    "question": "How to create a variable in Bash?",
    "answer": "Use: name=\"John\""
  },
  {
    "question": "How to print a variable?",
    "answer": "Use: echo $name"
  },
  {
    "question": "How to execute a shell command and capture output?",
    "answer": "Use: $(command) or `command`"
  },
  {
    "question": "How to create a function?",
    "answer": "Use: myfunc() { echo \"Hello\"; }"
  },
  {
    "question": "How to check if a string is empty?",
    "answer": "Use: if [[ -z \"$string\" ]]; then ... fi"
  },
  {
    "question": "How to check if a file exists?",
    "answer": "Use: if [[ -e \"file.txt\" ]]; then ... fi"
  },
  {
    "question": "How to create an array?",
    "answer": "Use: Fruits=('Apple' 'Banana' 'Orange')"
  },
  {
    "question": "How to access array elements?",
    "answer": "Use: echo \"${Fruits[0]}\""
  },
  {
    "question": "How to create a dictionary?",
    "answer": "Use: declare -A sounds; sounds[dog]=\"bark\""
  },
  {
    "question": "How to loop through a range of numbers?",
    "answer": "Use: for i in {1..5}; do ... done"
  },
  {
    "question": "How to read a file line by line?",
    "answer": "Use: while read -r line; do ... done <file.txt"
  },
  {
    "question": "How to perform string substitution?",
    "answer": "Use: echo \"${name/J/j}\" #=> \"john\""
  },
  {
    "question": "How to get string length?",
    "answer": "Use: echo \"${#name}\""
  },
  {
    "question": "How to extract a substring?",
    "answer": "Use: echo \"${name:0:2}\" #=> \"Jo\""
  },
  {
    "question": "How to remove a file extension?",
    "answer": "Use: echo \"${str%.cpp}\" # /path/to/foo"
  },
  {
    "question": "How to get a file extension?",
    "answer": "Use: echo \"${str##*.}\" # cpp"
  },
  {
    "question": "How to make a string lowercase?",
    "answer": "Use: echo \"${str,,}\""
  },
  {
    "question": "How to make a string uppercase?",
    "answer": "Use: echo \"${str^^}\""
  },
  {
    "question": "How to set default variable values?",
    "answer": "Use: echo \"${foo:-default}\""
  },
  {
    "question": "How to perform arithmetic operations?",
    "answer": "Use: echo $((a + 200))"
  },
  {
    "question": "How to redirect stdout to a file?",
    "answer": "Use: command > output.txt"
  },
  {
    "question": "How to redirect stderr to a file?",
    "answer": "Use: command 2> error.log"
  },
  {
    "question": "How to redirect both stdout and stderr?",
    "answer": "Use: command &> output.log"
  },
  {
    "question": "How to create a case statement?",
    "answer": "Use: case \"$1\" in start) ... ;; *) ... ;; esac"
  },
  {
    "question": "How to read user input?",
    "answer": "Use: read -r answer"
  },
  {
    "question": "How to get script directory?",
    "answer": "Use: dir=${0%/*}"
  },
  {
    "question": "How to process command line options?",
    "answer": "Use: while [[ \"$1\" =~ ^- ]]; do case $1 in -v) ... ;; esac; shift; done"
  },
  {
    "question": "How to create a here document?",
    "answer": "Use: cat <<END\nhello world\nEND"
  },
  {
    "question": "How to check if a command succeeded?",
    "answer": "Use: if command; then ... fi"
  },
  {
    "question": "How to get the exit status of last command?",
    "answer": "Use: echo $?"
  },
  {
    "question": "How to enable strict mode?",
    "answer": "Use: set -euo pipefail; IFS=$'\\n\\t'"
  },
  {
    "question": "How to perform pattern matching?",
    "answer": "Use: if [[ \"$string\" =~ . ]]; then ... fi"
  },
  {
    "question": "How to concatenate strings?",
    "answer": "Use: str=\"$str1$str2\""
  },
  {
    "question": "How to get the length of an array?",
    "answer": "Use: echo \"${#array[@]}\""
  },
  {
    "question": "How to iterate through an array?",
    "answer": "Use: for i in \"${array[@]}\"; do ... done"
  },
  {
    "question": "How to push to an array?",
    "answer": "Use: array+=(\"new\")"
  },
  {
    "question": "How to remove array elements?",
    "answer": "Use: unset array[2]"
  },
  {
    "question": "How to get dictionary values?",
    "answer": "Use: echo \"${sounds[@]}\""
  },
  {
    "question": "How to get dictionary keys?",
    "answer": "Use: echo \"${!sounds[@]}\""
  },
  {
    "question": "How to delete dictionary entries?",
    "answer": "Use: unset sounds[dog]"
  },
  {
    "question": "How to create a comment?",
    "answer": "Use: # Single line comment"
  },
  {
    "question": "How to create a multi-line comment?",
    "answer": "Use: : '\nThis is a\nmulti line\ncomment\n'"
  },
  {
    "question": "How to format output with printf?",
    "answer": "Use: printf \"Hello %s\" \"John\""
  },
  {
    "question": "How to transform strings with tr?",
    "answer": "Use: echo \"text\" | tr '[:lower:]' '[:upper:]'"
  },
  {
    "question": "How to get the last argument?",
    "answer": "Use: echo \"$_\""
  },
  {
    "question": "How to get the number of arguments?",
    "answer": "Use: echo \"$#\""
  },
  {
    "question": "How to access arguments?",
    "answer": "Use: echo \"$1\" # first argument"
  },
  {
    "question": "How to use brace expansion?",
    "answer": "Use: echo {A,B}.js # A.js B.js"
  },
  {
    "question": "How to create a subshell?",
    "answer": "Use: (cd somedir; echo \"I'm in $PWD\")"
  },
  {
    "question": "How to trap errors?",
    "answer": "Use: trap 'echo Error' ERR"
  }
]
